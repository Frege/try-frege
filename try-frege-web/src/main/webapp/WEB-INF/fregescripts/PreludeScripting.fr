module scripting.PreludeScripting where

import frege.Prelude hiding (print, println, trace, traceLn, printStr, printStrLn, traceStr, traceStrLn, stderr, stdout)

stdoutWriter :: StringWriter
stdoutWriter = IO.performUnsafe $ StringWriter.new ()

stderrWriter :: StringWriter
stderrWriter = IO.performUnsafe $ StringWriter.new ()
    
stdout = IO.performUnsafe $ stdoutWriter.printer
    
stderr = IO.performUnsafe $ stderrWriter.printer

print :: Show a => a -> IO ()
print str = printStr $ display str

println :: Show a => a -> IO ()
println str = printStrLn $ display str

trace :: String -> Bool
trace str = IO.performUnsafe (traceStr str >> IO.return false)

traceLn :: String -> Bool
traceLn str = IO.performUnsafe (traceStrLn str >> IO.return false)
  
printStr :: String -> IO ()
printStr str = stdout.write str
  
printStrLn :: String -> IO ()
printStrLn str = do
  printStr str
  printStr "\n"
  return ()
  
traceStr :: String -> IO ()
traceStr str = stderr.write str
  
traceStrLn :: String -> IO ()
traceStrLn str = do
  traceStr str
  traceStr "\n"
  return ()
  
stdoutStr = IO.performUnsafe $ stdoutWriter.toString
stderrStr = IO.performUnsafe $ stderrWriter.toString
