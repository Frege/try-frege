module tryfrege.repl.FregeReplServlet where

import Compiler.enums.Flags
import Data.Bits (BitSet)
import Compiler.types.Positions (Position)
--import Compiler.types.QNames -- todo dk: can this be removed? I triggers no "not used" warning when activated
import frege.Prelude hiding (print, read)
import Java.IO()
import Interpreter.FregeInterpreter (
    Message, Module, Expression, Definitions, InterpreterConfig, InterpreterClassLoader, JMap, ByteArray, HashMap,
    Interpreter, interpret, showSymbol, intercalateNewLine, buildShowScript,
    getSymbolType, symbolClass, symbolVar, showThrowableCause, variableDeclScript,
    isVariable, isString, sandboxFieldValue)
import Repl.FregeRepl (eval, slurp, Repl, ReplResult, ReplEnv, Command, help, ReplOpts, ReplIO)
import tryfrege.repl.ServletSupport

read :: Web -> ReplEnv -> IO ([Message] | Command)
read web state = do
   line <- fmap (maybe "" id) $ web.request.getParameter "cmd"
   let readResource resource = either (\a -> Left [a]) Right <$> slurp resource
   case Command.parse line of
     Left err -> return $ Left [Message.error err]
     Right Reload -> maybe err readResource state.lastExternalScript where
       err = return $ Left [Message.error "No source to reload!"]
     Right (Load path) -> readResource path
     Right cmd -> return $ Right cmd

print :: Web -> Command -> ReplEnv -> ReplResult -> IO [Message]
print _ Java _ (JavaSource src) = return [Message.info src]
print _ _ _ (ReplInfo msgs) = return msgs
print web (cmd@(Eval line)) env (CodeInfo sourceRepr g msgs) = case sourceRepr of
  Expression sym | isVariable g sym =
    if isString g sym
      then do
              stdoutWriter <- StringWriter.new ()
              stderrWriter <- StringWriter.new ()
              stdin <- fmap (maybe "" id) $ web.request.getParameter "stdin"
              valMaybe <- sandboxFieldValue (symbolClass sym g) (symbolVar sym g) stdin stdoutWriter stderrWriter env.state
              out <- stdoutWriter.toString
              err <- stderrWriter.toString
              return $ maybe [Message.error "undefined"]
                             (\m -> [Message.info . toString $ m, Message.hint out, Message.error err]) valMaybe
           `catch` (\err -> return [Message.error $ showThrowableCause err])
      else do
        let evalShow = do
                          let varDecl = variableDeclScript sym.name.base line
                          when (line /= sym.name.base) $
                            Repl.modify ReplEnv.{config <- InterpreterConfig.{predefs <- ((++) varDecl)}}
                          eval (Eval $ buildShowScript sym.name.base env.opts.showLimit g sym)
        (res, newEnv) <- Repl.run evalShow env
        case res of
--          CodeInfo{} -> print web cmd newEnv res -- this leads to stack overflow, just removing it works. Needs review. (dk)
          _ -> do
                  let typeCmd = Type line
                  (res, newEnv) <- Repl.run (eval typeCmd) env
                  print web typeCmd newEnv res
  Expression sym = return [Message.hint (":: " ++ (getSymbolType g sym))]
  Definitions syms = do
    let symLabels = map (showSymbol g) syms
    return (map Message.hint symLabels ++ msgs)
  Module moduleName = return (Message.info ("Module " ++ moduleName) : msgs)
print web (LoadExternal path script) env res = print web (Eval script) env res
print _ _ _ _ = return []

doGet :: MutableIO HttpServlet -> MutableIO HttpServletRequest -> MutableIO HttpServletResponse -> IO ()
doGet = doPost

doPost :: MutableIO HttpServlet -> MutableIO HttpServletRequest -> MutableIO HttpServletResponse -> IO ()
doPost !servlet !request !response = do
  let web = Web servlet request response
  session <- request.getSession
  env <- buildReplEnv web
  input <- read web env
  case input of
    Left msgs -> sendReplResult response msgs
    Right Reset -> clearSession session >> sendReplResult response []
    Right Help = sendReplResult response $ map Message.info (help cmdHelp)
    Right cmd -> do
       (res, newEnv) <- Repl.run (eval cmd) env
       saveSession newEnv session
       msgs <- print web cmd newEnv res
       sendReplResult response msgs

initClasses :: MutableIO ServletContext -> IOMutable (JMap String ByteArray)
initClasses context = do
  preludeClassesMaybe <- context.getAttribute "classes"
  maybe (compilePreludeScript context) asClassesMap preludeClassesMaybe

compilePreludeScript :: MutableIO ServletContext -> IOMutable (JMap String ByteArray)
compilePreludeScript context = do
  scriptStreamMaybe <- context.getResourceAsStream "/WEB-INF/fregescripts/PreludeInterpreter.fr"
  let compile stream = do
                          isr <- InputStreamReader.new stream "UTF-8"
                          br <- BufferedReader.new isr
                          script <- intercalateNewLine <$> br.getLines
                          env <- ReplEnv.initialState
                          (result, newState) <- Interpreter.run (interpret script) env.config env.state
                          newState.classes
      newMap = HashMap.new () :: IOMutable (JMap String ByteArray)
  maybe newMap compile scriptStreamMaybe

sessionAttr :: Mutable s HttpSession -> (Object -> ST s b) -> ST s b -> String -> ST s b
sessionAttr session f defaultValue name = do
  attrObj <- session.getAttribute name              -- todo dk: reading and writing from/to a session should always be synchronized
  maybe defaultValue f attrObj

buildReplEnv :: Web -> IO ReplEnv
buildReplEnv (Web{servlet=servlet,request=request}) = do
  session <- request.getSession
  let strToMaybe "" = Nothing
      strToMaybe s  = Just s
      stdFlags      = Flags.fromList [WARNINGS, HINTS, INLINE]
  lastJavaGenSrc     <- sessionAttr session (return . strToMaybe . asString) (return Nothing)  "lastJavaGenSrc"
  lastExternalScript <- sessionAttr session (return . strToMaybe . asString) (return Nothing)  "lastExternalScript"
  predefs            <- sessionAttr session (return . asString)              (return "")       "predefs"
  lineStart          <- sessionAttr session (return . asInt)                 (return  2)       "lineStart"
  showLimit          <- sessionAttr session (return . asInt)                 (return 80)       "showLimit"
  flags              <- sessionAttr session (return . BitSet . asFlags)      (return stdFlags) "compilerFlags"
  context            <- servlet.getServletContext
  classes            <- sessionAttr session asClassesMap                 (initClasses context) "classes"
  classLoader        <- InterpreterClassLoader.new classes
  return $ ReplEnv
    { lastJavaGenSrc     = lastJavaGenSrc
    , lastExternalScript = lastExternalScript
    , opts               = ReplOpts.initialState.{showLimit = showLimit}
    , lineStart          = lineStart
    , config             = InterpreterConfig predefs flags true
    , state              = classLoader
    }

-- todo dk: reading and writing from/to a session should always be synchronized
saveSession :: ReplEnv -> MutableIO HttpSession -> IO ()
saveSession replEnv session = do
  let extScriptStr = maybe "" id replEnv.lastExternalScript
      lastJavaGenSrc = maybe "" id replEnv.lastJavaGenSrc
  putSession session "predefs" replEnv.config.predefs
  putSession session "lineStart" replEnv.lineStart
  putSession session "showLimit" replEnv.opts.showLimit
  putSession session "compilerFlags" replEnv.config.compilerFlags
  replEnv.state.classes >>= putSession session "classes"
  putSession session "lastExternalScript" extScriptStr
  putSession session "lastJavaGenSrc" lastJavaGenSrc

-- todo dk: reading and writing from/to a session should always be synchronized
clearSession :: MutableIO HttpSession -> IO ()
clearSession session = do
  session.removeAttribute "predefs"
  session.removeAttribute "compilerFlags"
  session.removeAttribute "lineStart"
  session.removeAttribute "showLimit"
  session.removeAttribute "classes"
  session.removeAttribute "lastExternalScript"
  session.removeAttribute "lastJavaGenSrc"

sendReplResult :: MutableIO HttpServletResponse -> [Message] -> IO ()
sendReplResult response msgs = do
  response.setContentType "text/xml;charset=UTF-8"
  out <- response.getWriter
  out.println $ messagesToXml msgs

-- todo dk: reading and writing from/to a session should always be synchronized
putSession :: Mutable s HttpSession -> String -> a -> ST s ()
putSession session name value = session.setAttribute name (asObject value)

-- todo dk: reading and writing from/to a session should always be synchronized
putStrArraySession :: Mutable s HttpSession -> String -> ArrayOf s String -> ST s ()
putStrArraySession session name arr = do
  arrObj <- strArrToObject arr
  session.setAttribute name arrObj

pure native isControl java.lang.Character.isISOControl :: Char -> Bool

-- todo dk: subject to pattern reordering. Why not just map?
removeControlChars :: String -> String
removeControlChars s = packed . reverse $ go [] s.toList where
  go acc [] = acc
  go [] ('\b': xs) = go [] xs
  go (y:ys) ('\b': xs) = go ys xs
  go acc (x: xs) | wanted x = go (x:acc) xs
  go acc (_: xs) = go acc xs
  wanted x = not (isControl x) || x == '\n' || x == '\r' || x == '\t'

native strArrToObject "(Object)" :: ArrayOf s String -> ST s Object

pure native escapeXml org.apache.commons.lang3.StringEscapeUtils.escapeXml :: String -> String

messagesToXml :: [Message] -> String
messagesToXml msgs = render [
                      "<repl>",
                      "  <messages>",
                           msgsToXml,
                      "  </messages>",
                      "</repl>"
                     ] where
  render = unlines
  msgsToXml = render $ map msgToXml msgs

  msgToXml :: Message -> String
  msgToXml msg = render [
                          "<message>",
                          "  <type>",
                               show $ msg.msgType,
                          "  </type>",
                          "  <position>",
                               if msg.pos == Position.null then "" else show $ msg.pos,
                          "  </position>",
                          "  <text>",
                               escapeXml . removeControlChars $ msg.text,
                          "  </text>",
                          "</message>"
                        ]

cmdHelp = [(":t or :type <expression>", "Display the type of an expression."),
            (":browse <module name>", "Display the names in a module if " ++
                "a module name is provided otherwise display the names in the default REPL module."),
            (":java", "View Java translation of last compiled Frege source."),
            (":load <url or file>", "Load Frege code snippets from an URL."),
            (":r", "Reload the last URL."),
            (":set show-limit <limit>", "Set number of characters to show in the output string (Default: 80)."),
            (":set compilerOption", "Set compiler options such as 'hints', 'nowarn', 'inline', 'O', 'comments',"
                                      ++ "'ascii', 'greek', 'fraktur', 'latin'."),
            (":unset compilerOption", "Unset compiler option."),
            (":history", "Display the source history for definitions in the default REPL module."),
            (":reset", "Reset the session discarding all evaluated scripts."),
            (":version", "Display Frege version."),
            (":{", "Start multiline definitions."),
            (":}", "End multiline definitions."),
            (":help <name>", "Display the documentation for the given name." ++
                            " If the name is not provided, display this help message.")]

type StringArray = JArray String                     -- todo dk: remove. appears to be never used.

pure native asString "(String)"  :: Object -> String
pure native asInt    "(Integer)" :: Object -> Int
pure native asFlags  "(Long)"    :: Object -> Long
pure native asObject "(Object)"  :: a      -> Object
pure native toString             :: Object -> String

native asClassesMap  "(java.util.Map)" :: Object -> STMutable s (JMap String ByteArray)
native asStringArr   "(String[])"      :: Object -> STMutable s (JArray String)

native module where {
  public static class FregeReplController extends javax.servlet.http.HttpServlet {
    private static final long serialVersionUID = 1L;

    @Override
    protected void doPost(final javax.servlet.http.HttpServletRequest request,
        final javax.servlet.http.HttpServletResponse response) throws javax.servlet.ServletException,
        java.io.IOException {
      frege.prelude.PreludeBase.TST.performUnsafe(
        tryfrege.repl.FregeReplServlet.doPost(this, request, response)).call();
    }

    @Override
    protected void doGet(final javax.servlet.http.HttpServletRequest request,
        final javax.servlet.http.HttpServletResponse response) throws javax.servlet.ServletException,
        java.io.IOException {
      doPost(request, response);
    }
  }
}
