module tryfrege.repl.FregeSandboxRepl where

import frege.compiler.Data
import frege.compiler.Import
import frege.Version
import frege.java.Net 
import Data.List
import frege.interpreter.FregeScriptCompiler hiding(compile)
import frege.interpreter.FregeInterpreter hiding(evalShow)
import frege.compiler.Data(Global)
import frege.compiler.EclipseUtil as EU()
import frege.List as FL (Tree, values)

data ReplState = ReplState {
    lastExternalScript :: Maybe String,
    prompt :: String
}

data Repl a = Repl {un :: StateT ReplState Interpreter a} where
    get = Repl $ StateT (\s -> return (s, s)) 
    put s = Repl $ StateT (\_ -> return ((), s))

instance Monad Repl where
    return = Repl . return
    (Repl x) >>= f = Repl $ x >>= (\y -> Repl.un $ f y)
    
instance MonadIO Repl where
    liftIO = Repl . lift . liftIO

data ReplResult = ReplError [String] | ReplSuccess String | NoOutput

evalScript :: Command -> Repl ReplResult
evalScript (Eval line) = do
    oldInterpState <- Repl . lift $ Interpreter.get
    fregecRes <- Repl . lift $ compile line
    case fregecRes of
        CompilationSuccess (c@CompilationInfo{sourceInfo=sourceInfo,state=g}) ->
            case sourceInfo of
                Module -> return $ ReplSuccess $ "Loaded module: " ++ modName where
                    modName = moduleName g
                Definitions -> do
                    tate <- Repl.get
                    s <- Repl . lift $ Interpreter.get
                    Repl . lift . Interpreter.put $ s.{currentScript <- (++ newLine ++ line)}
                    return NoOutput
                Expression{variableName=var} -> do
                    res <- Repl . lift $ evalShow line
                    Repl . lift $ Interpreter.put oldInterpState
                    case res of
                        Left err -> return $ ReplError err
                        Right str -> return $ ReplSuccess str
        CompilationFailure err -> return $ ReplError err

evalScript (ListModule m) = do
    let moduleName = trim m
    replState <- Repl.get
    state <- Repl . lift $ Interpreter.get
    global <- liftIO $ MemoryClassLoader.new state.loader state.classes >>= standardOptions
    let res = outlineModule moduleName global
    return . ReplSuccess $ intercalate newLine res
    
evalScript List = do
    state <- Repl . lift $ Interpreter.get
    interpreterState <- Repl . lift $ Interpreter.get
    if isEmpty . trim $ interpreterState.currentScript then
        return NoOutput
    else
        evalScript $ ListModule state.options.moduleName

evalScript (Type expr) = Repl.get >>= Repl . lift . interpret where
  interpret replState = do
        oldState <- Interpreter.get
        typeOfExpression <- typeOfExpression expr
        Interpreter.put oldState
        case typeOfExpression of
            Right typ -> return $ ReplSuccess typ
            Left errs -> return $ ReplError errs

evalScript (Load (urlSpec@#.*?://#)) = do
    urle <- liftIO $ URL.new urlSpec
    let update res = case res of
            ReplSuccess message -> updateExternalScript urlSpec >> return res
            otherwise -> return res
    either handleMalformedURLException (\url -> evalURL url >>= update) urle
    
evalScript (Load invalidUrl) = return $ ReplError ["Invalid URL: " ++ invalidUrl]
        
evalScript Reload = do
    state <- Repl.get
    case state.lastExternalScript of
        Just extScript -> evalScript (Load extScript)
        Nothing -> return NoOutput --Nothing to reload 
            
evalScript History = do
    interpreterState <- Repl . lift $ Interpreter.get
    return $ ReplSuccess interpreterState.currentScript
    
evalScript Reset = do
    Repl.put initReplState
    initInterpreterState <- liftIO initInterpreterState
    Repl . lift $ Interpreter.put initInterpreterState
    return NoOutput

evalScript Skip = return NoOutput
evalScript Help = return $ ReplSuccess help
evalScript Version = Repl.get >>= (\s -> return $ ReplSuccess version)
evalScript Paste = return NoOutput  
evalScript Quit = return NoOutput

ioException :: IOException -> Repl ReplResult    
ioException e = return $ ReplError [Throwable.getMessage e]

evalURL :: URL -> Repl ReplResult
evalURL url = do
    replState <- Repl.get
    let contents = fetch `catch` handleIOE
        fetch = urlContents url >>= (return . Right)
        handleIOE :: IOException -> IO (Either String Script)
        handleIOE ioe = return $ Left ioe.getMessage
    scriptMay <- liftIO contents
    case scriptMay of 
        Right script -> evalScript $ Eval script
        Left err -> return $ ReplError [err]

updateExternalScript script = do
    replState <- Repl.get
    Repl.put $ replState.{lastExternalScript=Just script}
    
moduleName global = show $ sub.thisPack.className global where
    sub = Global.sub global

handleMalformedURLException :: MalformedURLException -> Repl ReplResult   
handleMalformedURLException malformed = return $ ReplError [malformed.getMessage]

outlineModule pack g = fst $ State.run (outlineModule' pack)  g where
    outlineModule' pack = do
        let p = Pack.new pack
        importClass Position.null p
        g <- getST
        case g.packages.lookup p of
            Nothing -> return []
            Just env -> return $ map (EU.label g) $ EU.symbols env
        
positionAndName a b = case Symbol.pos a <=> Symbol.pos b of
                                    Eq -> comparing (QName.base â€¢ Symbol.name) a b
                                    ne -> ne 
        
help = intercalate newLine [
            "At the prompt, you can enter Frege code snippets to get them evaluated.",
            "The output or compilation errors will be printed below the prompt.",
            "In addition to Frege code, the following commands are supported:",
            indentHelp ":type <expression>" "To print the type of an expression",
            indentHelp  ":p" "To enter paste mode, for multi-line/multiple definitions",
            indentHelp  ":q" "To quit REPL or paste mode",
            indentHelp ":list" "To list the identifiers along with types",
            indentHelp ":history" "To display the scripts evaluated so far",
            indentHelp ":version" "To display Frege version",
            indentHelp  ":load url" "To load Frege code snippets from an URL",
            indentHelp ":r" "To reload the last script file",
            indentHelp ":reset" "To reset the session discarding all evaluated scripts",
            indentHelp ":help" "To display this help message"]

indentHelp :: String -> String -> String
indentHelp cmd desc = 
    let fmtcmd = cmd ++ (concat $ replicate (20 - cmd.length) " ")
    in fmtcmd ++ " - " ++ desc
  
urlContents url = do
    inStream <- URL.openStream url
    scanner <- Scanner.new inStream
    scanner.useDelimiter "\\Z"
    scanner.next

data Scanner = mutable native java.util.Scanner where
    native new :: InputStream -> IO Scanner
    native fromFile new :: MutableIO File -> String -> IO Scanner throws FileNotFoundException
    native useDelimiter :: Scanner -> String -> IO ()
    native next :: Scanner -> IO String   
    
runRepl repl state = evalStateT (Repl.un repl) state

pure native isEmpty :: String -> Bool

data Command = Version | Help | List | ListModule String | Type String | Load String | Eval String | 
    Paste | History | Reload | Reset | Skip | Quit where 
    
    parse   :: String -> Either String Command
    parse s = parse' $ trim s where
        parse' "" = Right Skip
        parse' #^:# = parseCommand s
        parse' script = Right $ Eval script

    parseCommand (m~#:list\s(.*)#) = maybe (Right List) (Right . ListModule) $ m.group 1
    parseCommand ":list" = Right $ List
    parseCommand (m~#^:l.*?\s+(.*)#) = 
        maybe (Left "Missing external script path!") (Right . Load) $ m.group 1
    parseCommand  ":version" = Right Version
    parseCommand ":help" = Right Help
    parseCommand (m~#^:t.*?\s+(.*)#) = 
        maybe (Left "Missing expression!") (Right . Type) $ m.group 1
    parseCommand ":p" = Right Paste
    parseCommand (m~#^:p\s+(.*)#) = 
            maybe (Left "Missing script!") (Right . Eval) $ m.group 1
    parseCommand ":history" = Right History
    parseCommand ":r" = Right Reload
    parseCommand ":reset" = Right Reset
    parseCommand ":q" = Right Quit
    parseCommand otherwise = Left "Invalid Command"
    
derive Eq Command
derive Show Command

initReplState :: ReplState
initReplState = ReplState{
    lastExternalScript = Nothing,
    prompt = "frege> " --Default prompt
 }
    
initInterpreterState :: IO InterpreterState 
initInterpreterState = do
  urlarr <- URLArray.new 0
  loader <- ClassLoader.current >>= URLClassLoader.new urlarr
  classes <- HashMap.new ()
  let history = ""
  let options = Options {moduleName = "script.Main"}
  let interpreterState = InterpreterState {
      loader = loader,
      classes = classes,
      options = options,
      currentScript = ""
  }
  return interpreterState
  
evalShow :: Script -> Interpreter (Either [String] String)
evalShow source = do
  fregecRes <- compile source
  case fregecRes of
    -- The script is a set of definitions
    CompilationSuccess (c@CompilationInfo{sourceInfo=sourceInfo,state=g}) ->
        case sourceInfo of
            Module -> return $ Left ["Not an expression!"]
            Definitions -> return $ Left ["Not an expresssion!"]
            Expression{variableName=var} -> showVariable source var g
    CompilationFailure err -> return $ Left err

showVariable source var g = do
      let symbolMay = lookupVarSymbol g.thisTab var
      case symbolMay of
        Nothing -> return . Left $ ["Not found: " ++ var]
        Just symbol -> showSymbol source var symbol g
        
showSymbol source var symbol g | isVariable g symbol = do
    state <- Interpreter.get
    if isString g symbol then do
        loader <- liftIO $ asMemoryClassLoader g.sub.loader
        newclasses <- liftIO $ loader.getClasses
        v <- liftIO $ spawnFetchFieldValue state.options.moduleName var newclasses
        --v <- liftIO $ fieldValue state.options.moduleName var g.sub.loader
        case v of
            Left err -> return $ Left [err.getMessage]
            Right value -> do
                obj <- liftIO $ asObject value
                s <- liftIO $ obj.toString
                return $ Right s
    else do
        Interpreter.put $ state.{currentScript <- (++ newLine ++ var ++ " = " ++ source)}
        let showScript = buildShowScript var g symbol
        showResult <- evalShow showScript
        return showResult
showSymbol _ _ symbol g = return . Right $ getSymbolType symbol g